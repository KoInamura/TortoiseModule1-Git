// Class implements a sprite for a tortoise vs. hare race game. Sprite inherits
// from drawable. Sprite allows the user to load an image for the sprite as well
// as queue up moves. A move will not execute until the current move is done.

use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Queue
use Libraries.Sound.Audio

class Turtle is Drawable
    private number speed = 100
    /*
    Direction points along the four cardinal directions using these values:
    0: UP
    1: LEFT
    2: DOWN
    3: RIGHT
    */
    public constant integer UP = 0
    public constant integer LEFT = 1
    public constant integer DOWN = 2
    public constant integer RIGHT = 3
    integer direction = 0
    boolean penDown = true

    public Audio upLine
    public Audio downLine
    public Audio leftLine
    public Audio rightLine
    public Audio turnLeft
    public Audio turnRight
    public Audio penDownSound
    public Audio penUpSound
    public Audio moving
    
    public SoundModule soundModule

     /*
        This action Initializes the picture, initial position, speed, name, and collision boolean. It also initializes the sound Module object which loads all the correct sounds.

        Attribute: Parameter picture The text field containing the path to the sprite graphic.

        Attribute: Parameter x The number value for the starting x-coordinate for the sprite.

        Attribute: Parameter y The number value for the starting y-coordinate for the sprite.

        Attribute: Parameter speed The starting integer value for the speed

        Attribute: Parameter name The text value for the name for the sprite 

        Attribute: Parameter value The default boolean value for the Collision boolean.

        Attribute: Example
        Turtle turtle
        turtle:Initialize(/media/picture/turtle.png, 2.5, 3.0, 25, "turtle", true)
    */   

    action Initialize(text picture, number x, number y, integer speed, text name, boolean value )
        SetSpritePicture(picture)
        SetInitialPosition(y*60, x*60)
        SetSpeed(speed)
        SetName(name)
        SetCollidable(value)
        soundModule:Initialize(upLine, downLine, leftLine, rightLine, turnLeft, turnRight, penDownSound, penUpSound, moving)
    end
       
    Queue<Command> commandQueue

    /*
        This action sets the initial position for the Sprite object. Additionally
        this action sets the initial move state for the Sprite to be not moving
        at that position.
    
        Attribute: Parameter x This field is the x-coordinate of initial position.

        Attribute: Parameter y This field is the y-coordinate of initial position.

        Attribute: Example
        Turtle turtle
        turtle:SetInitialPosition(4.0, 1.)
    */

    action SetInitialPosition(number x, number y)
        SetPosition(x, y)
    end

    /*
        This action sets the speed of the spirte.
    
        Attribute: Parameter number s The number to set as the speed of the sprite

        Attribute: Example
        Turtle turtle
        turtle:SetSpeed(25)
    */

    action SetSpeed(number s)
        speed = s
    end

    /*
        This action returns the speed field as a number value.
    
        Attribute: Example
        Turtle turtle
        turtle:GetSpeed()
    */

    action GetSpeed() returns number
        return speed
    end

    /*
        Action creates a MoveCommand object that is set to the new coordinates. This move command will
        execute when all move commands issued before it have completed.
    
        Attribute: Parameters x x-coordinate of the target that the sprite is moving to.

        Attribute: Parameters y y-coordinate of the target that the sprite is moving to.

        Attribute: Example
        Turtle turtle
        turtle:MoveTo(4.0, 3.0)
    */

    action MoveTo(number x, number y)
        MoveCommand newMove
        newMove:SetTarget(x, y)
        commandQueue:Add(newMove)
    end

    /* 
        Action creates a MoveCommand object with the entered distance parameter. This move command will
        execute when all move commands issued before it have completed.

        Attribute: Parameter distance a number value of how far the sprite will move 

        Attribute: Example
        Turtle turtle
        turtle:MoveDistance(3.0)
    */

    action MoveDistance(number distance)
        MoveCommand newMove
        newMove:SetDistance(distance)
        commandQueue:Add(newMove)
    end

    /* 
       Action sets the amount of time period for when the Game will update.
       Attribute: Example
       Turtle turtle
       turtle:Update(50.0)
    */

    action Update(number time)
        MoveSprite(time)
    end

    /* 
        Action updates the sprite, deciding whether or not the sprite is ready
        to change move states. This is decided based on whether the sprite's
        coordinates are equal to the target move's coodinates.
    
        Attribute: Parameter time the number of seconds between game updates.

        Attribute: Example
        Turtle turtle
        turtle:MoveSprite(50.0)
    */

    private action MoveSprite(number time)
        if not commandQueue:IsEmpty()
            newMoveSet = false

            Command currentCommand = commandQueue:GetFromFront()

            if currentCommand is RotationCommand
                RotationCommand rotation = cast(RotationCommand, currentCommand)
                if rotation:IsRotating() = false
                    if rotation:GetDirection() = rotation:LEFT
                        Rotate(-90)
                        direction = (direction + 1) mod 4
                        turnLeft:Play()
                    elseif rotation:GetDirection() = rotation:RIGHT
                        Rotate(90)
                        direction = direction - 1
                        if direction < 0
                            direction = 3
                        end
                        turnRight:Play()
                    end
                    rotation:SetIsRotating(true)
                elseif not(turnLeft:IsPlaying() or turnRight:IsPlaying())
                    commandQueue:RemoveFromFront()
                end
                
            elseif currentCommand is MoveCommand
                MoveCommand currentMove = cast(MoveCommand, currentCommand)
                number distance = currentMove:GetDistance()
                if distance not= 0
                    if direction = UP
                        currentMove:SetTarget(GetX(), GetY() + distance)
                    elseif direction = LEFT
                        currentMove:SetTarget(GetX() - distance, GetY())
                    elseif direction = DOWN
                        currentMove:SetTarget(GetX(), GetY() - distance)
                    elseif direction = RIGHT
                        currentMove:SetTarget(GetX() + distance, GetY())
                    end
                    currentMove:SetDistance(0)
                end
                currentMove:SetStart(GetX(), GetY())
                number xTarget = currentMove:GetTargetX()
                number yTarget = currentMove:GetTargetY()
                number newX = GetX()
                number newY = GetY()

                // if drawable is close enough to the target, just set the drawable
                // to be at the target. This prevents the drawable from moving back
                // and forth upon reaching the target coordinates
                if (-1 * speed * time <= xTarget - newX and xTarget - newX <= speed * time)
                    SetX(xTarget)
                end

                if (-1 * speed * time <= yTarget - newY and yTarget - newY <= speed * time)
                    SetY(yTarget)
                end

                if GetX() = xTarget and GetY() = yTarget
                    commandQueue:RemoveFromFront()
                end

                newX = newX + speed * time * currentMove:GetXPercent()
                newY = newY + speed * time * currentMove:GetYPercent()
                SetX(newX)
                SetY(newY)
            elseif currentCommand is PenCommand
                PenCommand currentPen = cast(PenCommand, currentCommand)
                if IsPenDown() = true and currentPen:IsPenDown() = false
                    penUpSound:Play()
                    penDown = currentPen:IsPenDown()
                    if not(penDownSound:IsPlaying() or penUpSound:IsPlaying())
                        commandQueue:RemoveFromFront()
                    end    
                elseif IsPenDown() = false and currentPen:IsPenDown() = true
                    penDownSound:Play()
                    penDown = currentPen:IsPenDown()
                    if not(penDownSound:IsPlaying() or penUpSound:IsPlaying())
                    commandQueue:RemoveFromFront()
                    end
                end
            end
        end
    end

    /* 
        Action creates a RotationCommand object, calles the TurnLeft() action on the object, and then adds the command to the command queue.
        
        Attribute: Example
        Turtle turtle
        turtle:TurnLeft()
    */

    action TurnLeft
        RotationCommand rotation
        rotation:TurnLeft()
        commandQueue:Add(rotation)
    end
    /* 
        Action creates a RotationCommand object, calles the TurnRight() action on the object, and then adds the command to the command queue.
        
        Attribute: Example
        Turtle turtle
        turtle:TurnRight()
    */
    action TurnRight
        RotationCommand rotation
        rotation:TurnRight()
        commandQueue:Add(rotation)
    end

    /*
        Action returns the interger value assigned to a direction.

        Attribute: Example
        Turtle turtle
        turtle:GetDirection()
    */

    action GetDirection returns integer
        return direction
    end

    /*
        Action returns the value stored in the boolean field penDown. This indicates the status of the pen.

        Attribute: Example
        Turtle turtle
        turtle:IsPenDown()
    */

    action IsPenDown returns boolean
        return penDown
    end

    /*
        Action sets the value in the boolean field penDown. 

        Attribute: Example
        Turtle turtle
        turtle:SetPenDown()
    */

    action SetPenDown(boolean value)
        penDown = value
    end

    /*
        Action adds a command object to the command queue.

        Attribute: Parameter command This is the command object to be added to the command queue.

        Attribute: Example
        Turtle turtle
        MoveCommand moveCommand
        turtle:AddCommand(moveCommand)
    */

    action AddCommand(Command command)
        commandQueue:Add(command)
    end

    /*
    Action sets the picture to be used for the sprite. 

    Attribute: picture Text object that contains the local path to the picture to be used for the sprite.

    Attribute: Example
    Turtle turtle
    turtle:SetSpritePicture("/media//turtlepic.png")
    */

    action SetSpritePicture(text picture)
        Load(picture)
    end

end