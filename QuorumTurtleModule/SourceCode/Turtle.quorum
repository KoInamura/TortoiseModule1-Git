package Libraries.Curriculum.TurtleProgram

use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Sound.Audio
use Libraries.Game.Graphics.Color

class Turtle is Drawable
    
    number speed = 100
    
    Item2D grid
    number pixelsPerSquare = 50
    integer gridLength = 10

    public constant integer RIGHT = 0
    public constant integer UP = 1
    public constant integer LEFT = 2
    public constant integer DOWN = 3
    integer direction = UP

    integer gridX = 5
    integer gridY = 5

    /*
    Values used to indicate where the currently calculated end position and
    direction of the turtle will be. Used to give accurate results from the
    GetX(), GetY(), and GetDirections() actions.
    */
    integer forecastX = gridX
    integer forecastY = gridY
    integer forecastDirection = direction

    boolean penDown = true
    Color penColor
    integer lineThickness = 4

    Array<Command> commands
    Command currentCommand = undefined

    Audio left
    Audio right
    Audio up
    Audio down
    
    Audio turnLeft
    Audio turnRight

    Audio scribbling
    Audio penUpAudio
    Audio penDownAudio

    Audio errorAudio

    boolean scribbleStarted = false

    on create
        penColor = penColor:Black()
    end

    action Load(Item2D grid)
        me:grid = grid

        SetScale(0.5)
        Load("media/code/Arrow.png")

        left:Load("media/audioFiles/maleVoice/left.wav")
        right:Load("media/audioFiles/maleVoice/right.wav")
        up:Load("media/audioFiles/maleVoice/up.wav")
        down:Load("media/audioFiles/maleVoice/down.wav")

        turnLeft:Load("media/audioFiles/maleVoice/turnLeft.wav")
        turnRight:Load("media/audioFiles/maleVoice/turnRight.wav")

        penUpAudio:Load("media/audioFiles/maleVoice/penUp.wav")
        penDownAudio:Load("media/audioFiles/maleVoice/penDown.wav")
        scribbling:Load("media/audioFiles/Scribbling.wav")
        scribbling:EnableLooping()

        errorAudio:Load("media/audioFiles/Error.wav")
    end

    action Update(number seconds)
        if currentCommand = undefined or currentCommand:IsFinished()
            if commands:IsEmpty()
                currentCommand = undefined
                return now
            else
                currentCommand = commands:RemoveFromFront()
                currentCommand:Start(me)
            end
        end

        currentCommand:Update(seconds)
    end

    action TurnLeft
        forecastDirection = (forecastDirection + 1) mod 4

        RotationCommand command
        command:SetTurnLeft(true)
        commands:Add(command)
    end

    action TurnRight
        forecastDirection = forecastDirection - 1
        if forecastDirection < 0
            forecastDirection = 3
        end

        RotationCommand command
        command:SetTurnLeft(false)
        commands:Add(command)
    end

    action MoveForward
        if forecastDirection = LEFT and forecastX > 0
            forecastX = forecastX - 1
        elseif forecastDirection = RIGHT and forecastX < gridLength
            forecastX = forecastX + 1
        elseif forecastDirection = DOWN and forecastY > 0
            forecastY = forecastY - 1
        elseif forecastDirection = UP and forecastY < gridLength
            forecastY = forecastY + 1
        end

        MoveCommand command
        commands:Add(command)
    end

    action PenDown
        PenCommand command
        command:SetPenDown(true)
        commands:Add(command)
    end

    action PenUp
        PenCommand command
        command:SetPenDown(false)
        commands:Add(command)
    end

    action SetPenWidth(integer width)
        ChangePropertiesCommand command
        command:SetLineThickness(width)
        command:SetSpeech("Pen width set to " + width)
        command:SetTimer(2)
        commands:Add(command)
    end

    action SetPenColor(text color)
        Color newColor
        text toSay = ""

        if color:EqualsIgnoringCase("Black")
            newColor = newColor:Black()
            toSay = "Set pen color to Black."
        elseif color:EqualsIgnoringCase("Blue")
            newColor = newColor:Blue()
            toSay = "Set pen color to Blue."
        elseif color:EqualsIgnoringCase("Cyan")
            newColor = newColor:Cyan()
            toSay = "Set pen color to Cyan."
        elseif color:EqualsIgnoringCase("Dark Gray")
            newColor = newColor:DarkGray()
            toSay = "Set pen color to dark Gray."
        elseif color:EqualsIgnoringCase("Gray")
            newColor = newColor:Gray()
            toSay = "Set pen color to Gray."
        elseif color:EqualsIgnoringCase("Green")
            newColor = newColor:Green()
            toSay = "Set pen color to Green."
        elseif color:EqualsIgnoringCase("Light Gray")
            newColor = newColor:LightGray()
            toSay = "Set pen color to light Gray."
        elseif color:EqualsIgnoringCase("Magenta")
            newColor = newColor:Magenta()
            toSay = "Set pen color to Magenta."
        elseif color:EqualsIgnoringCase("Maroon")
            newColor = newColor:Maroon()
            toSay = "Set pen color to Maroon."
        elseif color:EqualsIgnoringCase("Navy")
            newColor = newColor:Navy()
            toSay = "Set pen color to Navy."
        elseif color:EqualsIgnoringCase("Olive")
            newColor = newColor:Olive()
            toSay = "Set pen color to Olive."
        elseif color:EqualsIgnoringCase("Orange")
            newColor = newColor:Orange()
            toSay = "Set pen color to Orange."
        elseif color:EqualsIgnoringCase("Pink")
            newColor = newColor:Pink()
            toSay = "Set pen color to Pink."
        elseif color:EqualsIgnoringCase("Purple")
            newColor = newColor:Purple()
            toSay = "Set pen color to Purple."
        elseif color:EqualsIgnoringCase("Red")
            newColor = newColor:Red()
            toSay = "Set pen color to Red."
        elseif color:EqualsIgnoringCase("Teal")
            newColor = newColor:Teal()
            toSay = "Set pen color to Teal."
        elseif color:EqualsIgnoringCase("White")
            newColor = newColor:White()
            toSay = "Set pen color to White."
        elseif color:EqualsIgnoringCase("Yellow")
            newColor = newColor:Yellow()
            toSay = "Set pen color to Yellow."
        else
            newColor = undefined
            toSay = "I didn't recognize the color " + color
        end

        ChangePropertiesCommand command
        command:SetColor(newColor)
        command:SetSpeech(toSay)
        command:SetTimer(2.5)
        commands:Add(command)
    end

    action SetPenColor(number r, number g, number b, number a)
        Color color
        color:SetColor(r, g, b, a)

        ChangePropertiesCommand command
        command:SetColor(color)
        command:SetSpeech("Set pen color from R G B A components.")
        command:SetTimer(2.5)
        commands:Add(command)
    end

    action SetDirection(integer value)
        direction = value
    end

    action GetDirection returns integer
        return direction
    end

    action SetSpeed(number value)
        speed = value
    end

    action GetSpeed returns number
        return speed
    end

    action GetPixelsPerSquare returns number
        return pixelsPerSquare
    end

    action GetGridLength returns integer
        return gridLength
    end

    action GetGridX returns integer
        return gridX
    end

    action GetGridY returns integer
        return gridY
    end

    action GetForecastX returns integer
        return forecastX
    end

    action GetForecastY returns integer
        return forecastY
    end

    action GetForecastDirection returns text
        if forecastDirection = LEFT
            return "Left"
        elseif forecastDirection = RIGHT
            return "Right"
        elseif forecastDirection = UP
            return "Up"
        else
            return "Down"
        end
    end

    action UpdateGridPosition(integer x, integer y)
        gridX = x
        gridY = y
    end

    action GetLeftAudio returns Audio
        return left
    end

    action GetRightAudio returns Audio
        return right
    end

    action GetDownAudio returns Audio
        return down
    end

    action GetUpAudio returns Audio
        return up
    end

    action GetPenUpAudio returns Audio
        return penUpAudio
    end

    action GetPenDownAudio returns Audio
        return penDownAudio
    end

    action GetTurnLeftAudio returns Audio
        return turnLeft
    end

    action GetTurnRightAudio returns Audio
        return turnRight
    end

    action GetErrorAudio returns Audio
        return errorAudio
    end

    action ResumeDrawSound
        if scribbleStarted
            scribbling:Resume()
        else
            scribbling:Play()
        end
    end

    action PauseDrawSound
        scribbling:Pause()
    end

    action SetPenDown(boolean pen)
        penDown = pen
    end

    action IsPenDown returns boolean
        return penDown
    end

    action SetLineColor(Color color)
        penColor = color
    end

    action GetLineColor returns Color
        return penColor
    end

    action SetLineThickness(integer thickness)
        lineThickness = thickness
    end

    action GetLineThickness returns integer
        return lineThickness
    end

    action NewLine returns Drawable
        Drawable line
        line:LoadFilledRectangle(lineThickness, lineThickness, penColor)
        line:SetCenter(gridX * pixelsPerSquare, gridY * pixelsPerSquare)
        
        // Line is added just before the last item in the Grid, which should
        // always be the turtle.
        integer position = grid:GetItemCount() - 1
        grid:Add(position, line)

        return line
    end
end