use Libraries.Game.Game
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Item2D
use Libraries.Sound.Audio
use Libraries.Sound.Speech

class TurtleGame is Game, KeyboardListener, CollisionListener2D
    /*Creating main character*/
    Turtle tortoise 

    /*Create sound object for Say*/
    Speech talker
    /*Creating an object to give the user the direction the tortoise is facing*/
    Audio beginSound

    Color color
    Color red = color:Red()
    Color blue = color:Blue()

    /*An array containing each column of dots, where each column is stored in
     an array.*/ 
    Array<Array<Drawable>> columns

    /* An array to evaluate which lines are showing at the end of the program*/
    Array<text> arrayOfLines

    /*Which column the green dot is in.*/
    integer columnPosition = 0

    /* Which row the green dot is in.*/
    integer rowPosition = 0

    /* How large each row and column of our grid is.*/
    integer gridSize = 10

    /*Creating the counter that keeps track of the direction the tortoise is facing
    integer direction = 4*/
    integer facing = 0

    /*
        Action creates the game object for the turtle game, setting up the grid and creating
        the line objects used when the pen is down.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:CreateGame()
    */

    action CreateGame

        /*Make setting Horizontal lines easier */
        integer lineWidthH = 20
        integer lineHeightH = 10

        /*Make setting vertical lines easier */
        integer lineWidthV = 10
        integer lineHeightV = 20

        text alphabet = "abcdefghijklmnopqrstuvwxyz"

        /*Make sure we monitor the collision.*/
        AddCollisionListener(me)

        /* Make sure we can get keyboard input. Used to test "moving" around.*/
        AddKeyboardListener(me)

        /* Counter that is used to set the x position of the dots.*/
        integer x = 0

        repeat while x < gridSize
            /* Counter that is used to set the y position of the dots.*/
            integer y = 0

            /* An array that will contain all of the dots in this column.*/
            Array<Drawable> column

            repeat while y < gridSize
                Drawable dot
                dot:LoadFilledCircle(10, color:Blue())

                /* Use the x and y counters to set position. We multiply
                 by 60 to provide some space between dots.*/
                dot:SetPosition(x * 60, y * 60)
                
                /* Add dot to the column array so we can reference it later, 
                 and also add it to the Game so the user can see it.*/
                Add(dot)
                column:Add(dot)

                dot:SetDescription("dot")
                dot:SetCollidable(true)

                Drawable rightLine
                rightLine:LoadFilledRectangle(lineWidthH, lineHeightH, red)
                rightLine:SetPosition(x * 60 + 30, y * 60 + 3)
                Add(rightLine)
                rightLine:Hide()
                rightLine:SetCollidable(true)
                text rowCharacter = alphabet:GetCharacter(y)
                rightLine:SetName(rowCharacter + x + rowCharacter + (x + 1))
                rightLine:SetDescription("line")

                Drawable topLine
                topLine:LoadFilledRectangle(lineWidthV, lineHeightV, red)
                topLine:SetPosition(x * 60 + 3, y * 60 + 30)
                Add(topLine)
                topLine:Hide()
                topLine:SetCollidable(true)
                text nextRowCharacter = alphabet:GetCharacter(y + 1)
                topLine:SetName(rowCharacter + x + nextRowCharacter + x)
                topLine:SetDescription("line")
                y = y + 1
            end

            /* Once we've completely filled an array with a column of dots,
             add it to our outer array.*/
            columns:Add(column)
            x = x + 1
        end

        /* Set our starting position.
         Take this off to implement the SetStartPos() ActivateDot(0, 0)*/

        /*Adding the main character to the game 
        /*Adding audio cue for the blind users*/
        tortoise:Initialize("/media/code/TortoiseBadge.png", columnPosition, rowPosition, 25, "tortoise", true)

        Add(tortoise)

        /*Audio for the beginning of the game*/
        beginSound:Load("/media/code/CowboyFootstep.wav")
        beginSound:Play()
        
        TurtleCommands()
    end

    /*
    Where the commands to move the turtle go.
    */
    blueprint action TurtleCommands

    /*
    Using left, right, up, or down arrow keys, move the "active" dot. In the 
    turtle module this would instead be based on calls to Forward() using the
    stored direction.

    Each condition checks to make sure it wouldn't go outside of the bounds of
    the grid.

    Attribute: Parameter event Passed keyboard event to move the sprite.
   
    Attribute: Example
    TurtleGame turtleGame
    KeyBoardEvent event
    turtleGame:PressedKey(event)
    */
    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:SPACE
            LineShowing()
        end
    end

    /*
    An action that turns a dot blue based on its column and row position.

    Attribute: Parameter x used to get the row based on the x-coordinate.

    Attribute: Parameter y used as the index to get the y-coordinate from the row 

    Attribute: Example
    TurtleGame turtleGame
    turtleGame:DeactivateDot(5.0, 4.0)
    */

    action DeactivateDot(integer x, integer y)
        Array<Drawable> column = columns:Get(x)
        Drawable dot = column:Get(y)
        DeactivateDot(dot)
    end

    /*
    An action that sets the color attribute of the dot object to blue.

    Attribute: Parameter dot The dot object that will have its color set.

    Attribute: Example
    TurtleGame turtleGame
    Drawable dot
    turtleGame:DeactivateDot(dot)
    */

    action DeactivateDot(Drawable dot)
        dot:SetColor(color:Blue())
    end

    /*
    An action that turns a dot green based on its column and row position.

    Attribute: Parameter x used to get the row based on the x-coordinate.

    Attribute: Parameter y used as the index to get the y-coordinate from the row 

    Attribute: Example
    TurtleGame turtleGame
    turtleGame:ActivateDot(5.0, 4.0)
    */

    action ActivateDot(integer x, integer y)
        Array<Drawable> column = columns:Get(x)
        Drawable dot = column:Get(y)
        ActivateDot(dot)
    end

    /*
    An action that sets the color attribute of the dot object to green.

    Attribute: Parameter dot The dot object that will have its color set.

    Attribute: Example
    TurtleGame turtleGame
    Drawable dot
    turtleGame:ActivateDot(dot)
    */ 

    action ActivateDot(Drawable dot)
        dot:SetColor(color:Green())
    end

    /*
        Action that is needed by Drawable objects to deal with a collision event has been detected. If dots are detected they are changed to green

        Attribute: Parameter event A 2d Collision event that has been detected by a listener.

        Attribute: Example
        TurtleGame turtleGame
        CollisionEvent2D event
        turtleGame:BeginCollision(event)
    */

    action BeginCollision(CollisionEvent2D event)
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())
            
        /*Checking the penReady boolean */
        if tortoise:IsPenDown()
        /*Making lines visible as they collide withthe tortoise */
            
            if itemA:GetDescription() = "line"
                itemA:Show()
                DirectionalSound()
                arrayOfLines:Add(itemA:GetName() + ", ")
            elseif itemB:GetDescription() = "line"
                itemB:Show()
                DirectionalSound()
                arrayOfLines:Add(itemB:GetName() + ", ")
            end
        end

        if itemA:GetDescription() = "line" or itemB:GetDescription() = "line"
            tortoise:moving:Play()
        end

        if itemA:GetDescription() = "dot"
            ActivateDot(itemA)
        elseif itemB:GetDescription() = "dot"
            ActivateDot(itemB)
        end
    end

    /* 
        Action needed to detect when the collision event has ended. Changes any detected dots to blue.

        Attribute event a 2D collision event that has been detected by a listener.

        Attribute Example:
        TurtleGame turtleGame
        CollisionEvent2D event 
        turtleGame:FinishCollision(event)
    */

    action FinishCollision(CollisionEvent2D event)
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())

        if itemA:GetDescription() = "dot"
            DeactivateDot(itemA)
        elseif itemB:GetDescription() = "dot"
            DeactivateDot(itemB)
        end
    end

    /* 
        Action that gets the integer direction of the turtle object then plays the corresponding directional sound.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:DirectionalSound
    */

    action DirectionalSound
        integer direction = tortoise:GetDirection()
        if direction = 1
            tortoise:leftLine:Play()
        elseif direction = 3
            tortoise:rightLine:Play()
        elseif direction = 2
            tortoise:downLine:Play()
        elseif direction = 0
            tortoise:upLine:Play()
        end
    end

    /* 
        Action that outputs the text path of the turtle. It is based on the arrayOfLine object.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:LineShowing()
    */

    action LineShowing()
        text startingText = ""
        integer counter = 0

        repeat arrayOfLines:GetSize() times
            startingText = startingText + arrayOfLines:Get(counter)
            counter = counter +1
        end
        output "The turtle has followed this path: " + startingText
    end

/* 
Available actions for users in Quorum Turtle Module class in standar Librar documentation.
These actions are to be used mainly in Code.org/Quorum CSP curriculum
*/

    /* 
        Action that moves the turtle forward one block to the direction it is facing

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:MoveForward()
     */

    action MoveForward
        if facing = 1
            if columnPosition > 0
                columnPosition = columnPosition - 1
                tortoise:MoveDistance(60)
            else
                output "Couldn't move left"
            end
        elseif facing = 3
            if columnPosition < gridSize - 1
                columnPosition = columnPosition + 1
                tortoise:MoveDistance(60)
            else
                output "Couldn't move right"
            end
        elseif facing = 2
            if rowPosition > 0
                rowPosition = rowPosition - 1
                tortoise:MoveDistance(60)
            else
                output "Couldn't move down"
            end
        elseif facing = 0
            if rowPosition < gridSize - 1
                rowPosition = rowPosition + 1
                tortoise:MoveDistance(60)
            else
                output "Couldn't move up"
            end
        else
            output "Unknown facing"
        end
    end

    /* 
        Action that turns the turtle 90 degree to the left from the direction it is facing using the Turtle object turnLeft action
        
        Attribute: Example
        TurtleGame turtleGame
        turtleGame:TurnLeft()
    */

    action TurnLeft
        facing = (facing + 1) mod 4
        tortoise:TurnLeft()
        
    end

    /*
        This command will make the turtle cready to draw a line between the adjacent
        dots (horizontally or vertically).

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:PenDown()
    */

    action PenDown
        PenCommand command
        command:PenDown()
        tortoise:AddCommand(command)
    end

    /*
        This command will suspend the turtle's ability to draw a line between the 
        adjacent dots. When one of the moving command is issued after this command,
        the turtle will not draw a line while moving to the next dot.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:PenUp()
    */

    action PenUp
        PenCommand command
        command:PenUp()
        tortoise:AddCommand(command)
    end

    /*
        This action is exclusively used for some leesons in Unit 3 of Quorum CSP 
        curriculum. This action initial position of the turtle at the appropriate 
        coordinate for the specific 'Coding Challenges' in the Unit 3.

        Attribute: Parameter x and integer value that is used for predefined choices of movements.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:SetStartPosition(3)
    */

    action SetStartPosition(integer x)
        if x = 1 or x = 2 
            // A1
            columnPosition = 1
            rowPosition = 0
        elseif x = 3 or x = 13 or x = 14
            // A0
            columnPosition = 0
            rowPosition = 0
        elseif x = 4 or x = 5 or x = 6 or x = 7 or x = 11 or x = 12
            // E5
            columnPosition = 5
            rowPosition = 4
        elseif x = 8 or x = 9 or x = 10
            // A4
            columnPosition = 4
            rowPosition = 0
        end
    end

    /* 
        Action that repeates the MoveForward() action the number of times given by the integer input.

        Attribute: Parameter x Integer values used for the number of repeated MoveForward() actions.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:RepeatMoveForward(4)
    */

    action RepeatMoveForward(integer x)
        repeat x times
            MoveForward()
        end
    end

    /*
        This action enables the user to set the starting position of the turtle
        by X-Y integer position of the dots in the array - such as (0, 0), (1, 5).

        Attribute: Parameter x the integer value used to get the row for the x-coordinate of the dot.
        
        Attribute: Parameter y the integer value used to get the y coordinate of the dots position.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:SetStartCoordinates(3,4)
    */

    action SetStartCoordinates(integer x, integer y)
        Array<Drawable> column = columns:Get(x)
        Drawable dot = column:Get(y)
        rowPosition = x
        columnPosition = y
        tortoise:SetInitialPosition(dot:GetGlobalX(),dot:GetGlobalY())
    end

    /*
        This action enable the user to cotrol how fast the turtle moves. Only the 
        user with complete familiarity with QTM should use this action. When the 
        speed is set too fast, the user most likely looses the sound effect of the 
        turtle's movement.

        Attribute: Parameter speed An integer value for the speed of the turtle object.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:SetTurtleSpeed(50.0)
    */
    action SetTurtleSpeed(number speed)
        tortoise:SetSpeed(speed)
    end

    /* 
        Action that returns the current set speed of the turtle object.

        Attribute: Example
        TurtleGame turtleGame
        turtleGame:GetTurtleSpeed()
    */

    action GetTurtleSpeed() returns number
        return tortoise:GetSpeed()
    end
end