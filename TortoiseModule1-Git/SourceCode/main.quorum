use Libraries.Game.Game
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Containers.Array
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Item2D
use Sprite

class Main is Game, KeyboardListener, CollisionListener2D
    //Creating main character
    Sprite tortoise 

    //Creating identifiable objects for lines
    Drawable lineA1A2
    Drawable lineA2A3
    Drawable lineA3A4
    Drawable lineB1B2
    Drawable lineB2B3
    Drawable lineB3B4
    Drawable lineC1C2
    Drawable lineC2C3
    Drawable lineC3C4
    Drawable lineD1D2
    Drawable lineD2D3
    Drawable lineD3D4

    Drawable lineA1B1
    Drawable lineB1C1
    Drawable lineC1D1
    Drawable lineA2B2
    Drawable lineB2C2
    Drawable lineC2D2
    Drawable lineA3B3
    Drawable lineB3C3
    Drawable lineC3D3
    Drawable lineA4B4
    Drawable lineB4C4
    Drawable lineC4D4

    Color color
    Color red = color:Red()
    Color blue = color:Blue()

    // An array containing each column of dots, where each column is stored in
    // an array. 
    Array<Array<Drawable>> columns

    // An array to evaluate which lines are showing at the end of the program
    Array<text> arrayOfLines

    // Which column the green dot is in.
    integer columnPosition = 0

    // Which row the green dot is in.
    integer rowPosition = 0

    // How large each row and column of our grid is.
    integer gridSize = 10

    

    action Main
        StartGame()
    end

    action CreateGame

        //Make setting Horizontal lines easier
        integer lineWidthH = 20
        integer lineHeightH = 10

        //Make setting vertical lines eaiser
        integer lineWidthV = 10
        integer lineHeightV = 20
      
        //Drawing the Horizontal lines
        lineA1A2:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineA1A2:SetPosition(0 * 60 + 30, 0 * 60 +3)
        Add(lineA1A2)
        lineA2A3:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineA2A3:SetPosition(1 * 60 + 30, 0 * 60 +3)
        Add(lineA2A3)
        lineA3A4:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineA3A4:SetPosition(2 * 60 + 30, 0 * 60 +3)
        Add(lineA3A4)

        lineB1B2:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineB1B2:SetPosition(0 * 60 + 30, 1 * 60 +3)
        Add(lineB1B2)
        lineB2B3:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineB2B3:SetPosition(1 * 60 + 30, 1 * 60 +3)
        Add(lineB2B3)
        lineB3B4:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineB3B4:SetPosition(2 * 60 + 30, 1 * 60 +3)
        Add(lineB3B4)

        lineC1C2:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineC1C2:SetPosition(0 * 60 + 30, 2 * 60 +3)
        Add(lineC1C2)
        lineC2C3:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineC2C3:SetPosition(1 * 60 + 30, 2 * 60 +3)
        Add(lineC2C3)
        lineC3C4:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineC3C4:SetPosition(2 * 60 + 30, 2 * 60 +3)
        Add(lineC3C4)

        lineD1D2:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineD1D2:SetPosition(0 * 60 + 30, 3 * 60 +3)
        Add(lineD1D2)
        lineD2D3:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineD2D3:SetPosition(1 * 60 + 30, 3 * 60 +3)
        Add(lineD2D3)
        lineD3D4:LoadFilledRectangle(lineWidthH, lineHeightH, red)
        lineD3D4:SetPosition(2 * 60 + 30, 3 * 60 +3)
        Add(lineD3D4)

        //Drawing Vertical lines

        lineA1B1:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineA1B1:SetPosition(0 * 60 + 3, 0 * 60 +30)
        Add(lineA1B1)
        lineB1C1:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineB1C1:SetPosition(0 * 60 + 3, 1 * 60 +30)
        Add(lineB1C1)
        lineC1D1:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineC1D1:SetPosition(0 * 60 + 3, 2 * 60 +30)
        Add(lineC1D1)

        lineA2B2:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineA2B2:SetPosition(1 * 60 + 3, 0 * 60 +30)
        Add(lineA2B2)
        lineB2C2:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineB2C2:SetPosition(1 * 60 + 3, 1 * 60 +30)
        Add(lineB2C2)
        lineC2D2:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineC2D2:SetPosition(1 * 60 + 3, 2 * 60 +30)
        Add(lineC2D2)

        lineA3B3:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineA3B3:SetPosition(2 * 60 + 3, 0 * 60 +30)
        Add(lineA3B3)
        lineB3C3:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineB3C3:SetPosition(2 * 60 + 3, 1 * 60 +30)
        Add(lineB3C3)
        lineC3D3:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineC3D3:SetPosition(2 * 60 + 3, 2 * 60 +30)
        Add(lineC3D3)
        
        lineA4B4:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineA4B4:SetPosition(3 * 60 + 3, 0 * 60 +30)
        Add(lineA4B4)
        lineB4C4:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineB4C4:SetPosition(3 * 60 + 3, 1 * 60 +30)
        Add(lineB4C4)
        lineC4D4:LoadFilledRectangle(lineWidthV, lineHeightV, red)
        lineC4D4:SetPosition(3 * 60 + 3, 2 * 60 +30)
        Add(lineC4D4)

        //Hide the line at the beginning
        lineA1A2:Hide()
        lineA2A3:Hide()
        lineA3A4:Hide()
        lineB1B2:Hide()
        lineB2B3:Hide()
        lineB3B4:Hide()
        lineC1C2:Hide()
        lineC2C3:Hide()
        lineC3C4:Hide()
        lineD1D2:Hide()
        lineD2D3:Hide()
        lineD3D4:Hide()

        lineA1B1:Hide()
        lineB1C1:Hide()
        lineC1D1:Hide()
        lineA2B2:Hide()
        lineB2C2:Hide()
        lineC2D2:Hide()
        lineA3B3:Hide()
        lineB3C3:Hide()
        lineC3D3:Hide()
        lineA4B4:Hide()
        lineB4C4:Hide()
        lineC4D4:Hide()

        //Making lines collidable
        lineA1A2:SetCollidable(true)
        lineA2A3:SetCollidable(true)
        lineA3A4:SetCollidable(true)
        lineB1B2:SetCollidable(true)
        lineB2B3:SetCollidable(true)
        lineB3B4:SetCollidable(true)
        lineC1C2:SetCollidable(true)
        lineC2C3:SetCollidable(true)
        lineC3C4:SetCollidable(true)
        lineD1D2:SetCollidable(true)
        lineD2D3:SetCollidable(true)
        lineD3D4:SetCollidable(true)

        lineA1B1:SetCollidable(true)
        lineB1C1:SetCollidable(true)
        lineC1D1:SetCollidable(true)
        lineA2B2:SetCollidable(true)
        lineB2C2:SetCollidable(true)
        lineC2D2:SetCollidable(true)
        lineA3B3:SetCollidable(true)
        lineB3C3:SetCollidable(true)
        lineC3D3:SetCollidable(true)
        lineA4B4:SetCollidable(true)
        lineB4C4:SetCollidable(true)
        lineC4D4:SetCollidable(true)

         //Setting the name for collision for lines
        lineA1A2:SetName("a1a2")
        lineA2A3:SetName("a2a3")
        lineA3A4:SetName("a3a4")
        lineB1B2:SetName("b1b2")
        lineB2B3:SetName("b2b3")
        lineB3B4:SetName("b3b4")
        lineC1C2:SetName("c1c2")
        lineC2C3:SetName("c2c3")
        lineC3C4:SetName("c3c4")
        lineD1D2:SetName("d1d2")
        lineD2D3:SetName("d2d3")
        lineD3D4:SetName("d3d4")

        lineA1B1:SetName("a1b1")
        lineB1C1:SetName("b1c1")
        lineC1D1:SetName("c1d1")
        lineA2B2:SetName("a2b2")
        lineB2C2:SetName("b2c2")
        lineC2D2:SetName("c2d2")
        lineA3B3:SetName("a3b3")
        lineB3C3:SetName("b3c3")
        lineC3D3:SetName("c3d3")
        lineA4B4:SetName("a4b4")
        lineB4C4:SetName("b4c4")
        lineC4D4:SetName("c4d4")

        //Make sure we monitor the collision.
        AddCollisionListener(me)

        // Make sure we can get keyboard input. Used to test "moving" around.
        AddKeyboardListener(me)

        // Counter that is used to set the x position of the dots.
        integer x = 0
        
        repeat while x < gridSize
            // Counter that is used to set the y position of the dots.
            integer y = 0

            // An array that will contain all of the dots in this column.
            Array<Drawable> column

            repeat while y < gridSize
                Drawable dot
                dot:LoadFilledCircle(10, color:Blue())

                // Use the x and y counters to set position. We multiply
                // by 60 to provide some space between dots.
                dot:SetPosition(x * 60, y * 60)
                
                // Add dot to the column array so we can reference it later, 
                // and also add it to the Game so the user can see it.
                Add(dot)
                column:Add(dot)

                y = y + 1
            end

            // Once we've completely filled an array with a column of dots,
            // add it to our outer array.
            columns:Add(column)
            x = x + 1
        end

        // Set our starting position.
        ActivateDot(0, 0)

        //Adding the main character to the game
        tortoise:Load("TortoiseBadge.png")
        tortoise:SetInitialPosition(columnPosition*60, rowPosition*60)
        tortoise:SetSpeed(50)
        tortoise:SetName("tortoise")
        tortoise:SetCollidable(true)
        Add(tortoise)
    end

    /*
    Using left, right, up, or down arrow keys, move the "active" dot. In the 
    turtle module this would instead be based on calls to Forward() using the
    stored direction.

    Each condition checks to make sure it wouldn't go outside of the bounds of
    the grid.
    */
    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:LEFT
            if columnPosition > 0
                DeactivateDot(columnPosition, rowPosition)
                columnPosition = columnPosition - 1
                ActivateDot(columnPosition, rowPosition)
                tortoise:MoveTo(columnPosition *60, rowPosition *60)
            end
        elseif event:keyCode = event:RIGHT
            if columnPosition < gridSize - 1
                DeactivateDot(columnPosition, rowPosition)
                columnPosition = columnPosition + 1
                ActivateDot(columnPosition, rowPosition)
                tortoise:MoveTo(columnPosition *60, rowPosition *60)
            end
        elseif event:keyCode = event:DOWN
            if rowPosition > 0
                DeactivateDot(columnPosition, rowPosition)
                rowPosition = rowPosition - 1
                ActivateDot(columnPosition, rowPosition)
                tortoise:MoveTo(columnPosition *60, rowPosition *60)
            end
        elseif event:keyCode = event:UP
            if rowPosition < gridSize - 1
                DeactivateDot(columnPosition, rowPosition)
                rowPosition = rowPosition + 1
                ActivateDot(columnPosition, rowPosition)
                tortoise:MoveTo(columnPosition *60, rowPosition *60)
            end
        end
    end

    /*
    An action that turns a dot blue based on its column and row position.
    */
    action DeactivateDot(integer x, integer y)
        Array<Drawable> column = columns:Get(x)
        Drawable dot = column:Get(y)
        dot:SetColor(color:Blue())
    end

    /*
    An action that turns a dot green based on its column and row position.
    */
    action ActivateDot(integer x, integer y)
        Array<Drawable> column = columns:Get(x)
        Drawable dot = column:Get(y)
        dot:SetColor(color:Green())
    end

    action BeginCollision(CollisionEvent2D event)
        Drawable itemA = cast(Drawable, event:GetItemA())
        Drawable itemB = cast(Drawable, event:GetItemB())

        //Making lines visible as they collide withthe tortoise
            if itemA:GetName() = "a1a2"
                lineA1A2:Show()
            elseif itemA:GetName() = "a2a3"
                lineA2A3:Show()
            elseif itemA:GetName() = "a3a4"
                lineA3A4:Show()
            elseif itemA:GetName() = "b1b2"
                lineB1B2:Show()
            elseif itemA:GetName() = "b2b3"
                lineB2B3:Show()
            elseif itemA:GetName() = "b3b4"
                lineB3B4:Show()
            elseif itemA:GetName() = "c1c2"
                lineC1C2:Show()
            elseif itemA:GetName() = "c2c3"
                lineC2C3:Show()
            elseif itemA:GetName() = "c3c4"
                lineC3C4:Show()
            elseif itemA:GetName() = "d1d2"
                lineD1D2:Show()
            elseif itemA:GetName() = "d2d3"
                lineD2D3:Show()
            elseif itemA:GetName() = "d3d4"
                lineD3D4:Show()
            elseif itemA:GetName() = "a1b1"
                lineA1B1:Show()
            elseif itemA:GetName() = "b1c1"
                lineB1C1:Show()
            elseif itemA:GetName() = "c1d1"
                lineC1D1:Show()
            elseif itemA:GetName() = "a2b2"
                lineA2B2:Show()
            elseif itemA:GetName() = "b2c2"
                lineB2C2:Show()
            elseif itemA:GetName() = "c2d2"
                lineC2D2:Show()
            elseif itemA:GetName() = "a3b3"
                lineA3B3:Show()
            elseif itemA:GetName() = "b3c3"
                lineB3C3:Show()
            elseif itemA:GetName() = "c3d3"
                lineC3D3:Show()
            elseif itemA:GetName() = "a4b4"
                lineA4B4:Show()
            elseif itemA:GetName() = "b4c4"
                lineB4C4:Show()
            elseif itemA:GetName() = "c4d4"
                lineC4D4:Show()
            end
    end

    action LineShowing()
        //Checking the horizontal line in rows first
        if lineA1A2:IsShowing()
            arrayOfLines:Add("a1a2 ")
        end
        if lineA2A3:IsShowing()
            arrayOfLines:Add("a2a3 ")
        end
        if lineA3A4:IsShowing()
            arrayOfLines:Add("a3a4 ")
        end
        if lineB1B2:IsShowing()
            arrayOfLines:Add("b1b2 ")
        end
        if lineB2B3:IsShowing()
            arrayOfLines:Add("b2b3 ")
        end
        if lineB3B4:IsShowing()
            arrayOfLines:Add("b3b4 ")
        end
        if lineC1C2:IsShowing()
            arrayOfLines:Add("c1c2 ")
        end
        if lineC2C3:IsShowing()
            arrayOfLines:Add("c2c3 ")
        end
        if lineC3C4:IsShowing()
            arrayOfLines:Add("c3c4 ")
        end
        if lineD1D2:IsShowing()
            arrayOfLines:Add("d1d2 ")
        end
        if lineD2D3:IsShowing()
            arrayOfLines:Add("d2d3 ")
        end
        if lineD3D4:IsShowing()
            arrayOfLines:Add("d3d4 ")
        end

        //Checking the vertical lines in the columns
        if lineA1B1:IsShowing()
            arrayOfLines:Add("a1b1 ")
        end
        if lineB1C1:IsShowing()
            arrayOfLines:Add("b1c1 ")
        end
        if lineC1D1:IsShowing()
            arrayOfLines:Add("c1d1 ")
        end
        if lineA2B2:IsShowing()
            arrayOfLines:Add("a2b2 ")
        end
        if lineB2C2:IsShowing()
            arrayOfLines:Add("b2c2 ")
        end
        if lineC2D2:IsShowing()
            arrayOfLines:Add("c2d2 ")
        end
        if lineA3B3:IsShowing()
            arrayOfLines:Add("a3b3 ")
        end
        if lineB3C3:IsShowing()
            arrayOfLines:Add("b3c3 ")
        end
        if lineC3D3:IsShowing()
            arrayOfLines:Add("c3d3 ")
        end
        if lineA4B4:IsShowing()
            arrayOfLines:Add("a4b4 ")
        end
        if lineB4C4:IsShowing()
            arrayOfLines:Add("b4c4 ")
        end
        if lineC4D4:IsShowing()
            arrayOfLines:Add("c4d4 ")
        end
    end
end